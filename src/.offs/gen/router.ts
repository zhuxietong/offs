// This file is auto-generated by vite-plugin-uni-router
// 确保_ME全局对象初始化
globalThis._ME = globalThis._ME || {
  ROUTES: [],
  style: {}
};

export type RouteJumpType = 'push' | 'replace' | 'reLaunch' | 'switchTab'

if (!String.prototype.startsWith) {
  String.prototype.startsWith = function (val) {
    if (this.substr(0, val.length) === val) {
      return true
    }
    return false
  }
}

function makeQuery(queryObject: object): string {
  let query = Object.entries(queryObject)
    .reduce((result, entry) => {
      result.push(entry.join('='))
      return result
    }, [] as string[])
    .join('&')
  return encodeURI(query)
}

function findRouter(name: string) {
  let pages_: any[] = []
  try {
    if (globalThis._ME?.ROUTES) {
      pages_ = globalThis._ME.ROUTES
    }
  } catch (e) {
    console.error('Error accessing routes:', e)
  }

  for (const item of pages_) {
    try {
      if (item.name === name) {
        item.url = '/' + item.path
        return item
      }
    } catch (e) {}
  }
  return undefined
}

export interface PageInstance {
  style: _PageStyle
  on?: { [k: string]: (e: any) => void }
  [k: string]: any
}

export interface RouterExt {
  on?: { [k: string]: (e: any) => void }
  events?: { [k: string]: (e: any) => void }
  success?: (e: any) => void
}

class Pages {
  get current(): PageInstance {
    const pages: any = getCurrentPages()
    const last = pages.length
    const page: any = <PageInstance>pages[last - 1] || {}
    if (page.style == undefined) {
      page.style = globalThis._ME?.style || {}
    }
    return page
  }

  back(step: number = 1) {
    uni.navigateBack({
      delta: step,
    })
  }

  get currentPage() {
    const pages = getCurrentPages()
    const page = pages[pages.length - 1]
    return page
  }

  get currentChannel() {
    return this.currentPage.getOpenerEventChannel()
  }

  callBack(key: string, obj: any) {
    this.currentChannel.emit(key, obj)
  }

  emit(key: string, obj: any) {
    const pages = getCurrentPages()

    if (pages.length > 1) {
      const page: any = pages[pages.length - 2]
      const on = page.on || {}
      const func = on[key]
      if (typeof func === 'function') {
        func(obj)
      }
    }
  }

  parser(obj: string | { name: string } | { path: string } | { url: string }) {
    switch (typeof obj) {
      case 'string':
        const str = <string>obj
        if (str.startsWith('/')) {
          return { url: obj }
        } else {
          return findRouter(str)
        }
      case 'object':
        const dict = <any>obj
        if (dict.url) {
          return obj
        }
        if (dict.name) {
          const router = findRouter(dict.name)
          if (router) {
            return { url: '/' + router.path }
          }
        }
        if (dict.path) {
          return { url: '/' + dict.path }
        }
        break
      default:
        return undefined
    }
  }

  _next(obj: any, more: any, type: RouteJumpType = 'push') {
    const router = this.parser(obj)
    if (router) {
      obj = obj || {}
      const { json } = obj
      const { query } = obj
      if (json) {
        let queryStr = ''
        // #ifdef APP-PLUS
        queryStr = '?json=' + JSON.stringify(json)
        // #endif
        // #ifndef APP-PLUS
        queryStr = '?json=' + encodeURIComponent(JSON.stringify(json))
        // #endif
        if (query) {
          queryStr = queryStr + '&' + makeQuery(query)
          delete router.query
        }
        router.url = router.url + queryStr
        delete router.json
      } else {
        if (query) {
          router.url = router.url + '?' + makeQuery(query)
          delete router.query
        }
      }
      const routerObj = Object.assign(router, more || {})
      try {
        if (type === 'push') {
          let on = this.currentPage.on || {}
          on = Object.assign({}, on, router.on)
          this.currentPage.on = on
          uni.navigateTo(routerObj)
        } else if (type === 'replace') {
          uni.redirectTo(routerObj)
        } else if (type === 'switchTab') {
          uni.switchTab(routerObj)
        } else if (type === 'reLaunch') {
          uni.reLaunch(routerObj)
        }
      } catch (e) {
        console.error('Navigation error:', e)
      }
    }
  }

  push(router: string | { url: string } | { path: string } | { name: string }, more?: RouterExt) {
    this._next(router, more, 'push')
  }

  tab(router: string | { url: string } | { path: string } | { name: string }, more?: RouterExt) {
    this._next(router, more, 'switchTab')
  }

  replace(router: string | { url: string } | { path: string } | { name: string }, more?: RouterExt) {
    this._next(router, more, 'replace')
  }

  restart(router: string | { url: string } | { path: string } | { name: string }, more?: RouterExt) {
    this._next(router, more, 'reLaunch')
  }
}

// 创建全局_To实例
const pages = new Pages()
const _To = {
  back: pages.back.bind(pages),
  push: pages.push.bind(pages),
  replace: pages.replace.bind(pages),
  reLunch: pages.restart.bind(pages),
  tab: pages.tab.bind(pages),
  callBack: pages.callBack.bind(pages),
  emit: pages.emit.bind(pages),
  current: () => pages.current,
}

// 挂载到全局
globalThis._To = _To

export default _To